#include <iostream>

typedef std::string Elem; // list element type
class DNode {
private:
  Elem elem;     // node element value
  DNode* prev;   // previous node in list
  DNode* next;   // next node in list
  friend class DLinkedList; // allow DLinkedList access

public:
  DNode(const Elem& e, DNode* p = nullptr, DNode* n = nullptr) : elem(e), prev(p), next(n) {}
};

class DLinkedList {
public:
  DLinkedList();                          // constructor
  ~DLinkedList();                         // destructor
  bool empty() const;                     // is list empty?
  const Elem& front() const;              // get front element
  const Elem& back() const;               // get back element
  void addFront(const Elem& e);           // add to front of list
  void addBack(const Elem& e);            // add to back of list
  void addAt(int position, const Elem& e);// add at specific position
  void removeFront();                     // remove from front
  void removeBack();                      // remove from back

private:
  DNode* head;                            // list sentinels
  DNode* tail;

protected:
  void add(DNode* v, const Elem& e);      // insert new node before v
  void remove(DNode* v);                  // remove node v
};

DLinkedList::DLinkedList() {               // constructor
  head = new DNode;                        // create sentinels
  tail = new DNode;
  head->next = tail;                       // have them point to each other
  tail->prev = head;
}

DLinkedList::~DLinkedList() {              // destructor
  while (!empty()) removeFront();          //  remove all but sentinels
  delete head;                             //  remove the sentinels
  delete tail;
}

bool DLinkedList::empty() const {          // is list empty?
  return (head->next == tail);
}

const Elem& DLinkedList::front() const {   // get front element
  return head->next->elem;
}

const Elem& DLinkedList::back() const {    // get back element
  return tail->prev->elem;
}

// insert new node before v
void DLinkedList::add(DNode* v, const Elem& e) {
  DNode* u = new DNode(e);
  u->next = v;
  u->prev = v->prev;
  v->prev->next = v->prev = u;
}

void DLinkedList::addFront(const Elem& e) { // add to front of list
  add(head->next, e);
}

void DLinkedList::addBack(const Elem& e) { // add to back of list
  add(tail, e);
}

void DLinkedList::addAt(int position, const Elem& e) { // add at specific position
  DNode* current = head;
  for (int i = 0; i < position && current->next != tail; ++i) {
    current = current->next;
  }
  add(current->next, e);
}

void DLinkedList::remove(DNode* v) {      // remove node v
  DNode* u = v->prev;                    // predecessor
  DNode* w = v->next;                    // successor
  u->next = w;                           // unlink v from the list
  w->prev = u;
  delete v;
}

void DLinkedList::removeFront() {         // remove from front
  remove(head->next);
}

void DLinkedList::removeBack() {          // remove from back
  remove(tail->prev);
}

int main() {
  DLinkedList myList;
  myList.addBack("One");
  myList.addBack("Three");
  myList.addAt(1, "Two"); // Insert "Two" at position 1
  std::cout << "Front: " << myList.front() << std::endl; // Front: One
  std::cout << "Back: " << myList.back() << std::endl;   // Back: Three

  myList.removeFront();
  std::cout << "Front after removal: " << myList.front() << std::endl; // Front after removal: Two

  return 0;
}
